[build-system]
# Using this .toml file in accordance with emerging support for PEP 517 and PEP 518 which aims to get away from setup.py
# and allow static (text config file) declaration of projct core metadata for package build/setup.
#
# A build-system consists of a frontend (e.g. pip) and a backend (e.g. setuptools)
# - pip frontend using pyproject.toml: https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/
# - setuptools backend using pyproject.toml: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
#   - NOTE: This was "New in 61.0.0" and is still considered experimental as of 2022-04-05
requires = ["pip", "setuptools"]
#requires = ["pip>=22.1", "setuptools>=46.0", "wheel", "attrs"]
build-backend = "setuptools.build_meta"

[project]
# Spec: https://packaging.python.org/en/latest/specifications/declaring-project-metadata
#
# See also:
#    Transition towards pyproject.toml centric build/setup config:
#        https://www.python.org/dev/peps/pep-0621/
#            - Implies that much of the "packaging core metadata" in setup(...) may move to pyproject.toml
#        https://snarky.ca/what-the-heck-is-pyproject-toml/
#    Emerging pattern to follow:
#        https://github.com/pypa/sampleproject/tree/pep-621, which may eventually get merged into the main branch:
#        https://github.com/pypa/sampleproject
#
# Testing:
#   A local editabale install with dependent packages can be tested with commands like:
#
#        python3 -m venv .venv/$(basename "$PWD")
#        source .venv/$(basename "$PWD")/bin/activate
#        pip install --editable git+file://<LOCAL_PATH>@<BRANCH>#egg=usaspending-api[dev] --src .
#
#    - <LOCAL_PATH> replaced with e.g.: /Users/devmcdev/Development/myapps/thisrepo
#    - <BRANCH> replaced with whatever branch or tag name in the repo you want to pull code from
#    - remove the [dev] extra at the end of the usaspending-api package name if those dependent packages are not
#      desired, e.g. if installing it for a production runtime
name = "usaspending-api"
version = "0.0.0"
description = """This API is utilized by USAspending.gov to obtain all federal spending data which is open source
and provided to the public as part of the DATA Act."""
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3 :: Only",
]
# From: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#dynamic
# "Specifies which fields listed by this PEP were intentionally unspecified so another tool can/will provide such
# metadata dynamically."
# We use setup.py to dynamically extract dependent packages from requirements*.txt files to keep config DRY
dynamic = ["dependencies", "optional-dependencies"]
[tool.setuptools.packages.find]
# See: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#setuptools-specific-configuration
#where = ["usaspending_api"]  # list of folders that contain the packages (["."] by default)
where = ["."]  # list of folders that contain the packages (["."] by default)

[tool.black]
line-length = 120
target_version = ['py37']
exclude = '/(\.git|\.venv|venv|migrations)/'
